/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package bbtriangle;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

class TriangleTest {
    @Test
    public void testEquilateralTriangle() {
        // Valid Equivalence Class: Triângulo Equilátero
        Triangle triangle = new Triangle(5, 5, 5);
        // Expected Output: classify() deve retornar "equilateral"
        assertEquals("equilateral", triangle.classify());
    }

    @Test
    public void testIsoscelesTriangle() {
        // Valid Equivalence Class: Triângulo Isósceles
        Triangle triangle = new Triangle(5, 5, 7);
        // Expected Output: classify() deve retornar "isosceles"
        assertEquals("isosceles", triangle.classify());
    }

    @Test
    public void testRightAngledTriangle() {
        // Valid Equivalence Class: Triângulo Retângulo
        Triangle triangle = new Triangle(3, 4, 5);
        // Expected Output: classify() deve retornar "right-angled"
        assertEquals("right-angled", triangle.classify());
    }

    @Test
    public void testScaleneTriangle() {
        // Valid Equivalence Class: Triângulo Escaleno
        Triangle triangle = new Triangle(7, 8, 9);
        // Expected Output: classify() deve retornar "scalene"
        assertEquals("scalene", triangle.classify());
    }

    @Test
    public void testImpossibleTriangle() {
        // Invalid Equivalence Class: Triângulo Impossível
        Triangle triangle = new Triangle(1, 0, 12);
        // Expected Output: classify() deve retornar "impossible"
        assertEquals("impossible", triangle.classify());
    }

    @Test
    public void testNegativeSideLengths() {
        // Invalid Equivalence Class: Lados com valores negativos
        Triangle triangle = new Triangle(-1, 2, 3);
        // Expected Output: isImpossible() deve retornar true
        assertTrue(triangle.isImpossible());

        triangle = new Triangle(1, -2, 3);
        // Expected Output: isImpossible() deve retornar true
        assertTrue(triangle.isImpossible());

        triangle = new Triangle(1, 2, -3);
        // Expected Output: isImpossible() deve retornar true
        assertTrue(triangle.isImpossible());
    }
}

